{"version":3,"sources":["components/taskpanel.js","components/mainsection.js","components/modal.js","components/contextAPI/reducer.js","TaskManager.js","index.js"],"names":["TaskPanel","state","useContext","StateContext","dispatch","DispatchContext","className","tasks","map","task","status","taskName","date","onClick","type","payload","msg","id","MainSection","length","Modal","htmlFor","placeholder","value","entries","input","onChange","e","target","required","name","selected","Boolean","modalSignal","message","trueDate","crudeDate","Date","split","pop","join","initialState","flag","editId","reducer","action","find","newTasks","filter","editedTasks","console","log","createContext","TaskManager","useReducer","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb5d0b4b.chunk.js","sourcesContent":["import React, { useContext } from 'react'\r\nimport { DispatchContext, StateContext } from '../TaskManager'\r\n\r\nfunction TaskPanel() {\r\n    const state = useContext(StateContext);\r\n    const dispatch = useContext(DispatchContext)\r\n\r\n    return (\r\n        <section className='main-section'>\r\n\r\n            {state.tasks.map((task) => {\r\n                return (\r\n                    <div\r\n                        className={task.status ? \"taskdiv done\" : \"taskdiv notdone\"}\r\n                        key={task.id}\r\n                    >\r\n\r\n                        <section>\r\n                            <p className='taskname'>{task.taskName}</p>\r\n                            <p className=\"taskday\">{task.date}</p>\r\n                        </section>\r\n                        <section className='icon-section'>\r\n                            <i className=\"far fa-edit\" onClick={() => {\r\n                                dispatch({\r\n                                    type: \"OPEN_MODAL_EDIT\",\r\n                                    payload: { msg: \"edit item\", id: task.id }\r\n                                })\r\n                            }}></i>\r\n                            <i className=\"fas fa-minus-circle\" onClick={() => {\r\n                                dispatch({ type: \"REMOVE_TASK\", payload: task.id })\r\n                            }}></i>\r\n                        </section>\r\n                    </div>\r\n                )\r\n            })}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default TaskPanel\r\n","import React, { useContext } from 'react'\r\nimport { StateContext, DispatchContext } from '../TaskManager'\r\nimport TaskPanel from './taskpanel';\r\n\r\nfunction MainSection() {\r\n    const state = useContext(StateContext);\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    return (\r\n        <>\r\n            <div className='main-div'>\r\n                {\r\n                    !state.tasks.length &&\r\n                    <div className='empty-section'>\r\n                        add tasks\r\n                    </div>\r\n                }\r\n\r\n                {state.tasks.length ? <TaskPanel /> : null}\r\n\r\n                <div className=\"button-div\">\r\n                    <button className='add' onClick={() => {\r\n                        dispatch({ type: 'OPEN_MODAL_ADD', payload: \"add item\" })\r\n                    }}>Add</button>\r\n                    {\r\n                        state.tasks.length ?\r\n                            <button className='clear-all' onClick={() => {\r\n                                dispatch({ type: 'CLEAR_ALL_TASKS' })\r\n                            }}>\r\n                                clear all\r\n                            </button> :\r\n                            null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainSection\r\n","import React, { useContext } from 'react'\r\nimport { StateContext, DispatchContext } from '../TaskManager'\r\n\r\nfunction Modal() {\r\n\r\n    const state = useContext(StateContext);\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    return (\r\n        <div className='modal-div'>\r\n            <section>\r\n\r\n                <div className='modal-inputs'>\r\n                    <label htmlFor=\"taskname\" className='label-taskname'>\r\n                        Task Name:\r\n                    </label><br />\r\n                    <input type=\"text\"\r\n                        id='taskname'\r\n                        placeholder='Put Your Task'\r\n                        value={state.entries.input}\r\n                        onChange={(e) => {\r\n                            dispatch({\r\n                                type: \"SET_ENTRIES\",\r\n                                payload: { ...state.entries, input: e.target.value }\r\n                            })\r\n                        }}\r\n                        required />\r\n                    <br /><br />\r\n\r\n                    <label htmlFor=\"Status\" className='label-status'>\r\n                        Status\r\n                    </label><br />\r\n                    <select name=\"status\" id=\"status\" value={state.entries.selected ? \"1\" : \"\"} onChange={(e) => {\r\n                        dispatch({\r\n                            type: \"SET_ENTRIES\",\r\n                            payload: { ...state.entries, selected: Boolean(e.target.value) }\r\n                        })\r\n                    }}>\r\n\r\n                        <option value=\"1\">DONE</option>\r\n                        <option value=\"\">NOT DONE</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='modal-buttons'>\r\n                    <button onClick={() => {\r\n                        state.modalSignal.message === \"add item\" ?\r\n                            state.entries.input ?\r\n                                dispatch({ type: 'ADD_ITEM' })\r\n                                :\r\n                                dispatch({ type: 'CLOSE_MODAL' })\r\n                            :\r\n                            dispatch({ type: \"EDIT_TASK\" })\r\n\r\n                        dispatch({ type: 'CLOSE_MODAL' })\r\n                    }}>\r\n                        {state.modalSignal.message}\r\n                    </button>\r\n                    <button onClick={() => {\r\n                        dispatch({ type: 'CLOSE_MODAL' })\r\n                    }}>Close</button>\r\n                </div>\r\n\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","function trueDate() {\r\n    let splitted = Date().split(':')[0]\r\n    let crudeDate = splitted.split(\" \")\r\n    crudeDate.pop()\r\n\r\n    return crudeDate.join(\" \");\r\n}\r\n\r\nexport const initialState = {\r\n    tasks: [\r\n        { id: 1, taskName: \"Laundry\", date: trueDate(), status: false },\r\n        { id: 2, taskName: \"Grocery\", date: trueDate(), status: false },\r\n        { id: 3, taskName: \"Car Washing\", date: trueDate(), status: false }\r\n    ],\r\n    modalSignal: { flag: false, message: \"\" },\r\n    editId: null,\r\n    entries: { input: \"\", selected: false }\r\n}\r\n\r\nexport const reducer = (state, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"OPEN_MODAL_ADD\":\r\n            return { ...state, modalSignal: { flag: true, message: action.payload } }\r\n\r\n        case \"OPEN_MODAL_EDIT\":\r\n            let target = state.tasks.find((task) => task.id === action.payload.id)\r\n            return {\r\n                ...state,\r\n                modalSignal: { flag: true, message: action.payload.msg },\r\n                entries: { input: target.taskName, selected: target.status },\r\n                editId: action.payload.id\r\n            }\r\n\r\n        case \"CLOSE_MODAL\":\r\n            return {\r\n                ...state,\r\n                modalSignal: { flag: false, message: \"\" },\r\n                entries: { input: \"\", selected: false }\r\n            }\r\n\r\n        case \"CLEAR_ALL_TASKS\":\r\n            return { ...state, tasks: [] }\r\n\r\n        case \"ADD_ITEM\":\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, {\r\n                    id: state.tasks.length + 1,\r\n                    taskName: state.entries.input,\r\n                    date: trueDate(),\r\n                    status: state.entries.selected\r\n                }],\r\n                entries: { input: \"\", selected: false }\r\n            }\r\n\r\n        case \"REMOVE_TASK\":\r\n            let newTasks = state.tasks.filter(task => task.id !== action.payload)\r\n            return { ...state, tasks: newTasks }\r\n\r\n        case \"EDIT_TASK\":\r\n            let editedTasks = state.tasks.map(task => {\r\n                if (task.id === state.editId) {\r\n                    let editedtask = {\r\n                        ...task,\r\n                        taskName: state.entries.input,\r\n                        date: trueDate(),\r\n                        status: state.entries.selected\r\n                    }\r\n                    return editedtask;\r\n                }\r\n                return task;\r\n            })\r\n            return { ...state, tasks: editedTasks, entries: { input: \"\", selected: false } }\r\n\r\n        case \"SET_ENTRIES\":\r\n            console.log(action.payload);\r\n            return { ...state, entries: action.payload }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","import React, { createContext, useReducer } from 'react'\r\nimport MainSection from './components/mainsection';\r\nimport Modal from './components/modal';\r\nimport { reducer, initialState } from './components/contextAPI/reducer'\r\n\r\nexport const StateContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nfunction TaskManager() {\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n    return (\r\n        <StateContext.Provider value={state}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                <div className='background-div'></div>\r\n                <header>\r\n                    <h2>Simple Task Manager</h2>\r\n                    <i className=\"fas fa-tasks\"></i>\r\n                </header>\r\n                <MainSection />\r\n                {state.modalSignal.flag ? <Modal /> : null}\r\n            </DispatchContext.Provider>\r\n        </StateContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TaskManager\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TaskManager from './TaskManager'\n\nReactDOM.render(\n  < TaskManager />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}